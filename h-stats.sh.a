#!/usr/bin/env bash

	CUSTOM_DIR=$(dirname "$BASH_SOURCE")

	source $CUSTOM_DIR/h-manifest.conf

	LOAD_LIMIT=5
	algo="blake"

	khs=0
	stats=0
	gpu_stats=$(< $GPU_STATS_JSON)

	readarray -t gpu_stats < <( jq --slurp -r -c '.[] | .busids, .brand, .temp, .fan, .power, .load | join(" ")' $GPU_STATS_JSON 2>/dev/null)
	busids=(${gpu_stats[0]})
	brands=(${gpu_stats[1]})
	temps=(${gpu_stats[2]})
	fans=(${gpu_stats[3]})
	power=(${gpu_stats[4]})
	load=(${gpu_stats[5]})

	count=${#busids[@]}

	total_power=1
	for(( i=0; i<count; i++)); do
		[[ ${load[i]} -gt $LOAD_LIMIT ]] && total_power=$(( total_power + power[i] ))
	done

	now=$(( $(date +%s) - 30 ))
	if [[ -f $CUSTOM_LOG_BASENAME.log && `stat -c %Y $CUSTOM_LOG_BASENAME.log` -gt $now ]]; then
		khs=$( cat $CUSTOM_LOG_BASENAME.log | grep hashrate | awk -F\  '{print $2}' | tail -n1 | sed 's/\..*//g' )
		khs=$khs"000"
	else
		echo "No log $CUSTOM_LOG_BASENAME.log"
	fi

#hashrate: 6600 MH/s gpu0: 1071 MH/s gpu1: 1093 MH/s gpu2: 1088 MH/s gpu3: 1110 MH/s gpu4: 1142 MH/s gpu5: 1097 MH/s
uptime=$( ps -o etimes -p $(pidof karapuz) | tail -n 1 )

	hash_arr=()
	busid_arr=()
	fan_arr=()
	temp_arr=()
	n=0
	for(( i=0; i < count; i++ )); do
		[[ "${brands[i]}" == "cpu" ]] && continue
		[[ "${busids[i]}" =~ ^([A-Fa-f0-9]+): ]]
		busid_arr+=( $((16#${BASH_REMATCH[1]})) )
		temp_arr+=(${temps[i]})
		fan_arr+=(${fans[i]})
		idst=$(((n+2)));
		[[ ${load[i]} -gt $LOAD_LIMIT ]] && hash=$( cat $CUSTOM_LOG_BASENAME.log | tail -n1 | awk -F" MH" -v id="$idst" '{ print $id }' | awk '{ print $NF }' ) || hash=0
		hash_arr+=($hash)
		(( n++ ))
	done

	hash_json=`printf '%s\n' "${hash_arr[@]}" | jq -cs '.'`
	bus_numbers=`printf '%s\n' "${busid_arr[@]}"  | jq -cs '.'`
	fan_json=`printf '%s\n' "${fan_arr[@]}"  | jq -cs '.'`
	temp_json=`printf '%s\n' "${temp_arr[@]}"  | jq -cs '.'`

	# emulate uptime
	start_time=`stat -c %Y $CUSTOM_CONFIG_FILENAME 2>/dev/null` &&
		uptime=$((`date +%s` - $start_time)) || uptime=

	# found
	found=$(grep -c "submitted" $CUSTOM_LOG_BASENAME.log 2>/dev/null)

	stats=$(jq -n --arg found $found --arg algo "$algo"  --argjson bus_numbers "$bus_numbers" --argjson fan "$fan_json" \
		--argjson temp "$temp_json" --argjson hs "$hash_json" --arg uptime "$uptime" --arg ver "$CUSTOM_VERSION" \
		'{hs_units: "mhs", $hs, $algo, $ver, $uptime, $bus_numbers, $temp, $fan, ar:[$found]}')

	#echo $khs
	#echo $stats
